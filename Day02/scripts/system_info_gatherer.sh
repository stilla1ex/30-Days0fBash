#!/bin/bash

# Day 2 Script: System Information Gatherer
# An interactive script that collects system information for security assessment

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script information
SCRIPT_NAME="System Information Gatherer"
VERSION="1.0"
AUTHOR="Cybersecurity Learning"

# Function to print colored output
print_header() {
    echo -e "${BLUE}===========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}===========================================${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Main information gathering function
gather_system_info() {
    local output_file="$1"
    
    {
        echo "=== SYSTEM INFORMATION REPORT ==="
        echo "Generated: $(date)"
        echo "Generated by: $SCRIPT_NAME v$VERSION"
        echo
        
        echo "=== BASIC SYSTEM INFO ==="
        echo "Hostname: $(hostname)"
        echo "Operating System: $(uname -s)"
        echo "Kernel Version: $(uname -r)"
        echo "Architecture: $(uname -m)"
        echo "Current User: $(whoami)"
        echo "User ID: $(id)"
        echo
        
        echo "=== SYSTEM UPTIME AND LOAD ==="
        uptime
        echo
        
        echo "=== MEMORY INFORMATION ==="
        if command -v free >/dev/null 2>&1; then
            free -h
        else
            echo "free command not available"
        fi
        echo
        
        echo "=== DISK USAGE ==="
        df -h 2>/dev/null | head -10
        echo
        
        echo "=== NETWORK CONFIGURATION ==="
        echo "Network interfaces:"
        if command -v ip >/dev/null 2>&1; then
            ip addr show | grep -E "(inet |inet6 )" | head -10
        elif command -v ifconfig >/dev/null 2>&1; then
            ifconfig | grep -E "(inet |inet6 )" | head -10
        else
            echo "Network commands not available"
        fi
        echo
        
        echo "=== LISTENING PORTS ==="
        if command -v netstat >/dev/null 2>&1; then
            netstat -tlnp 2>/dev/null | head -20
        elif command -v ss >/dev/null 2>&1; then
            ss -tlnp | head -20
        else
            echo "Port scanning commands not available"
        fi
        echo
        
        echo "=== RUNNING PROCESSES (TOP 10) ==="
        ps aux --sort=-%cpu | head -11
        echo
        
        echo "=== ENVIRONMENT VARIABLES ==="
        echo "PATH: $PATH"
        echo "HOME: $HOME"
        echo "SHELL: $SHELL"
        echo "USER: $USER"
        echo "LOGNAME: $LOGNAME"
        echo
        
        echo "=== INSTALLED SECURITY TOOLS ==="
        security_tools=("nmap" "netcat" "nc" "wireshark" "tcpdump" "openssl" "ssh" "curl" "wget")
        for tool in "${security_tools[@]}"; do
            if command -v "$tool" >/dev/null 2>&1; then
                echo "✓ $tool: $(which "$tool")"
            else
                echo "✗ $tool: not found"
            fi
        done
        echo
        
        echo "=== RECENT LOGIN ATTEMPTS ==="
        if [[ -r /var/log/auth.log ]]; then
            echo "Recent authentication attempts:"
            tail -10 /var/log/auth.log 2>/dev/null | grep -E "(Failed|Accepted)" || echo "No recent auth events found"
        elif [[ -r /var/log/secure ]]; then
            echo "Recent authentication attempts:"
            tail -10 /var/log/secure 2>/dev/null | grep -E "(Failed|Accepted)" || echo "No recent auth events found"
        else
            echo "Authentication logs not accessible"
        fi
        echo
        
        echo "=== FIREWALL STATUS ==="
        if command -v iptables >/dev/null 2>&1; then
            echo "iptables rules count: $(iptables -L 2>/dev/null | wc -l || echo "0")"
        fi
        if command -v ufw >/dev/null 2>&1; then
            ufw status 2>/dev/null || echo "ufw not configured"
        fi
        echo
        
        echo "=== REPORT END ==="
        echo "Generated: $(date)"
        
    } | tee "$output_file"
}

# Interactive menu
show_menu() {
    clear
    print_header "$SCRIPT_NAME v$VERSION"
    echo
    echo "Select an option:"
    echo "1. Quick system overview"
    echo "2. Full system report"
    echo "3. Custom information gathering"
    echo "4. Network information only"
    echo "5. Security tools check"
    echo "6. Exit"
    echo
}

quick_overview() {
    print_header "Quick System Overview"
    echo "Hostname: $(hostname)"
    echo "OS: $(uname -s) $(uname -r)"
    echo "User: $(whoami)"
    echo "Uptime: $(uptime -p 2>/dev/null || uptime)"
    echo "Load: $(uptime | awk -F'load average:' '{print $2}')"
    echo "Memory: $(free -h 2>/dev/null | awk 'NR==2{printf "%.1f%% of %.1fGB\n", $3*100/$2, $2/1024/1024}' || echo "N/A")"
    echo "Disk: $(df -h / 2>/dev/null | awk 'NR==2{printf "%s used of %s (%s)\n", $3, $2, $5}' || echo "N/A")"
}

network_info() {
    print_header "Network Information"
    
    echo "=== Network Interfaces ==="
    if command -v ip >/dev/null 2>&1; then
        ip addr show
    elif command -v ifconfig >/dev/null 2>&1; then
        ifconfig
    else
        print_error "No network commands available"
    fi
    
    echo -e "\n=== Routing Table ==="
    if command -v ip >/dev/null 2>&1; then
        ip route
    elif command -v route >/dev/null 2>&1; then
        route -n
    else
        print_error "No routing commands available"
    fi
    
    echo -e "\n=== Listening Ports ==="
    if command -v netstat >/dev/null 2>&1; then
        netstat -tlnp
    elif command -v ss >/dev/null 2>&1; then
        ss -tlnp
    else
        print_error "No port scanning commands available"
    fi
}

security_tools_check() {
    print_header "Security Tools Check"
    
    # Categories of security tools
    declare -A tool_categories
    tool_categories[network]="nmap netcat nc ncat socat"
    tool_categories[web]="curl wget nikto dirb gobuster"
    tool_categories[crypto]="openssl gpg hashcat john"
    tool_categories[forensics]="binwalk strings hexdump file"
    tool_categories[system]="ssh scp rsync screen tmux"
    
    for category in "${!tool_categories[@]}"; do
        echo -e "\n=== ${category^^} TOOLS ==="
        for tool in ${tool_categories[$category]}; do
            if command -v "$tool" >/dev/null 2>&1; then
                print_success "$tool: $(which "$tool")"
            else
                print_warning "$tool: not found"
            fi
        done
    done
}

# Main execution
main() {
    # Check if output directory exists
    mkdir -p reports
    
    while true; do
        show_menu
        read -p "Enter your choice (1-6): " choice
        
        case $choice in
            1)
                quick_overview
                ;;
            2)
                print_header "Generating Full System Report"
                timestamp=$(date +%Y%m%d_%H%M%S)
                output_file="reports/system_report_$timestamp.txt"
                gather_system_info "$output_file"
                print_success "Report saved to: $output_file"
                ;;
            3)
                print_header "Custom Information Gathering"
                echo "Select information to gather:"
                echo "1. System basics"
                echo "2. Network info"
                echo "3. Process info"
                echo "4. Security tools"
                read -p "Enter choices (e.g., 1,2,4): " custom_choices
                echo "Custom gathering not implemented in this demo"
                print_warning "Feature coming soon!"
                ;;
            4)
                network_info
                ;;
            5)
                security_tools_check
                ;;
            6)
                print_success "Goodbye!"
                exit 0
                ;;
            *)
                print_error "Invalid choice. Please select 1-6."
                ;;
        esac
        
        echo
        read -p "Press Enter to continue..."
    done
}

# Script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
